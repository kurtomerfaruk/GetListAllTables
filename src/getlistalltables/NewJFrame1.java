/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package getlistalltables;

import static getlistalltables.NewJFrame.infoBox;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Omer Faruk KURT
 */
public class NewJFrame1 extends javax.swing.JFrame {

    private static final long serialVersionUID = 417803000544591875L;

    public List<String> tableName = new ArrayList<String>();
    public List<Columns> columns = new ArrayList<>();
    public Connection conn = null;

    /**
     * Creates new form NewJFrame1
     */
    public NewJFrame1() {
        initComponents();
    }

    public void connectionDB() {
        NewJFrame frame = new NewJFrame();
        try {
            String driver = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
            Class.forName(driver);

            // Create a connection to the database
            String url = "jdbc:sqlserver://" + frame.txtServerName.getText() + ";databaseName=" + frame.txtSchema.getText();

            conn = DriverManager.getConnection(url, frame.txtUserName.getText(), frame.txtPassword.getText());

            System.out.println("Successfully Connected to the database!");

            infoBox("Successfully Connected to the database!", "Successfull");

        } catch (ClassNotFoundException e) {

            System.out.println("Could not find the database driver " + e.getMessage());
        } catch (SQLException e) {

            System.out.println("Could not connect to the database " + e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jButton1 = new javax.swing.JButton();

        jMenuItem1.setText("jMenuItem1");

        jMenuItem2.setText("jMenuItem2");

        jMenuItem3.setText("jMenuItem3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane2.setViewportView(jTree1);
        jTree1.getAccessibleContext().setAccessibleParent(null);

        jButton1.setText("Create");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {

            File file = new File("C:\\convert.sql");
            if (!file.exists()) {
                file.createNewFile();
            }

            FileWriter fw = new FileWriter(file.getAbsoluteFile());
            BufferedWriter bw = new BufferedWriter(fw);
            StringBuilder builder = new StringBuilder();

            String id = "";
            for (int i = 0; i < tableName.size(); i++) {
                String get = tableName.get(i);
                builder.append("\n CREATE TABLE ");
                builder.append(get);
                builder.append(" ( \n");
                for (int j = 0; j < columns.size(); j++) {
                    Columns get1 = columns.get(j);

                    if (get.equals(get1.getTable())) {
                        builder.append(get1.getColumnName()).append(" ");
                        if (get1.getColumnType().contains("identity")) {
                            id = get1.getColumnName();
                        }
                        if (get1.getColumnName().equals("id")) {
                            builder.append("serial");
                            builder.append(" ");
                            builder.append(" NOT NULL ");
                        } else {
                            if (get1.getColumnType().equals("nvarchar")) {
                                builder.append("character varying ").append("(");
                                builder.append(get1.getColumnSize()).append(")");
                            } else if (get1.getColumnType().equals("int")) {
                                builder.append("integer ");
                            } else if (get1.getColumnType().equals("datetime")) {
                                builder.append("timestamp without time zone ");
                            } else if (get1.getColumnType().equals("bit")) {
                                builder.append("boolean DEFAULT true ");
                            } else if (get1.getColumnType().equals("date")) {
                                builder.append("date ");
                            } else if (get1.getColumnType().equals("decimal")) {
                                builder.append("numeric").append("(18,2)");
                            } else if (get1.getColumnType().equals("varbinary(MAX)")) {
                                builder.append("bytea ");
                            } else if (get1.getColumnType().equals("image")) {
                                builder.append("bytea ");
                            } else if (get1.getColumnType().equals("time")) {
                                builder.append("time without time zone ");
                            }
                        }

                        builder.append(",").append("\n");
                    }

                }
                builder.append("CONSTRAINT ");
                builder.append(get).append("_pkey PRIMARY KEY (");
                builder.append(id).append(")");
                builder.append("\n) \n WITH \n( \nOIDS=FALSE\n)").append(";");
            }

            bw.write(builder.toString());
            bw.close();

            infoBox("Created file!", "Successfull");

            File fileQuery = new File("C:\\insert.sql");
            if (!fileQuery.exists()) {
                fileQuery.createNewFile();
            }

            FileWriter fwQuery = new FileWriter(fileQuery.getAbsoluteFile());
            BufferedWriter bwQuery = new BufferedWriter(fwQuery);

            StringBuilder insertBuilder = new StringBuilder();


            connectionDB();

            Statement stm = conn.createStatement();

            for (int i = 0; i < tableName.size(); i++) {
                String get = tableName.get(i);
                ResultSet rst = stm.executeQuery("Select * from " + get);
                while (rst.next()) {
                    insertBuilder.append("\n INSERT INTO ");
                    insertBuilder.append(get).append("(");
                    for (int j = 0; j < columns.size(); j++) {
                        Columns get1 = columns.get(j);
                        if (get.equals(get1.getTable())) {
                            insertBuilder.append(get1.getColumnName()).append(",");
                        }
                    }
                    insertBuilder.replace(insertBuilder.lastIndexOf(","), insertBuilder.lastIndexOf(",") + 1, "");
                    insertBuilder.append(")").append(" VALUES ( ");
                    for (int j = 0; j < columns.size(); j++) {
                        Columns column = columns.get(j);
                        if (get.equals(column.getTable())) {
                            if (column.getColumnName().equals("id")) {
                                insertBuilder.append(rst.getInt(column.getColumnName()));
                            } else if (column.getColumnType().equals("int")) {
                                if (rst.getInt(column.getColumnName()) == 0) {
                                    insertBuilder.append("null");
                                } else {
                                    insertBuilder.append(rst.getInt(column.getColumnName()));
                                }
                            } else if (column.getColumnType().equals("nvarchar") || column.getColumnType().equals("datetime") || column.getColumnType().equals("date") || column.getColumnType().equals("time")) {
                                if (rst.getString(column.getColumnName()) == null) {
                                    insertBuilder.append("null");
                                } else {
                                    insertBuilder.append("'").append(rst.getString(column.getColumnName())).append("'");
                                }
                            } else if (column.getColumnType().equals("bit")) {
                                insertBuilder.append(rst.getBoolean(column.getColumnName()));
                            } else if (column.getColumnType().equals("decimal")) {
                                insertBuilder.append(rst.getBigDecimal(column.getColumnName()));
                            } else if (column.getColumnType().equals("image")) {
                                insertBuilder.append(rst.getBlob(column.getColumnName()));
                            }
                            insertBuilder.append(",");
                        }
                    }
                    insertBuilder.replace(insertBuilder.lastIndexOf(","), insertBuilder.lastIndexOf(",") + 1, "");
                    insertBuilder.append(");").append("\n");
                }

            }

            bwQuery.write(insertBuilder.toString());
            bwQuery.close();

        } catch (FileNotFoundException ex) {
            Logger.getLogger(NewJFrame1.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(NewJFrame1.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(NewJFrame1.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(NewJFrame1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables
}
